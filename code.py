# -*- coding: utf-8 -*-
"""pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6AmSOvuWfv_vU-bFs2nKZ4n6tTNIEza

# Classifying Fashion-MNIST

We'll be using the [Fashion-MNIST dataset](https://github.com/zalandoresearch/fashion-mnist), a drop-in replacement for the MNIST dataset. MNIST is actually quite trivial with neural networks where you can easily achieve better than 97% accuracy. Fashion-MNIST is a set of 28x28 greyscale images of clothes. It's more complex than MNIST, so it's a better representation of the actual performance of your network, and a better representation of datasets you'll use in the real world.
<p align="center">
<img src='https://github.com/udacity/deep-learning-v2-pytorch/blob/master/intro-to-pytorch/assets/fashion-mnist-sprite.png?raw=1' width=500px>
</p>
In this notebook, you'll build your own neural network. For the most part, you could just copy and paste the code from Part 3, but you wouldn't be learning. It's important for you to write the code yourself and get it to work. Feel free to consult the previous notebooks though as you work through this.

First off, let's load the dataset through torchvision.
"""

import torch
from torchvision import datasets, transforms
import helper

import warnings
warnings.filterwarnings('ignore')

# Define a transform to normalize the data
transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,))])

# Download and load the training data
trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

# Download and load the test data
testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=True)

"""Here we can see one of the images."""

image, label = next(iter(trainloader))
helper.imshow(image[0,:]);

"""## Building the network

Here you should define your network. As with MNIST, each image is 28x28 which is a total of 784 pixels, and there are 10 classes. You should include at least one hidden layer. We suggest you use ReLU activations for the layers and to return the logits or log-softmax from the forward pass. It's up to you how many layers you add and the size of those layers.
"""

# Define your network architecture here
import torch.nn.functional as F
class Network(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(784,256)
        self.fc2 = nn.Linear(256,128)
        self.fc3 = nn.Linear(128,64)
        self.fc4 = nn.Linear(64,10)
        self.dropout = nn.Dropout(p=0.2)
    def forward(self,x):
        x = x.view(x.shape[0], -1) #flattening tensor in the forward pass itself
        # x[0] gives the batch size
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.dropout(F.relu(self.fc2(x)))
        x = self.dropout(F.relu(self.fc3(x)))
        x = F.log_softmax(self.fc4(x), dim=1)
        return x

"""# Train the network

Now you should create your network and train it. First you'll want to define [the criterion](http://pytorch.org/docs/master/nn.html#loss-functions) ( something like `nn.CrossEntropyLoss`) and [the optimizer](http://pytorch.org/docs/master/optim.html) (typically `optim.SGD` or `optim.Adam`).

Then write the training code. Remember the training pass is a fairly straightforward process:

* Make a forward pass through the network to get the logits 
* Use the logits to calculate the loss
* Perform a backward pass through the network with `loss.backward()` to calculate the gradients
* Take a step with the optimizer to update the weights

By adjusting the hyperparameters (hidden units, learning rate, etc), you should be able to get the training loss below 0.4.
"""

# TODO: Create the network, define the criterion and optimizer
model = Network()
criterion = nn.NLLLoss() #because we're using log_softmax above
optimizer = optim.Adam(model.parameters(), lr=10e-4)

# TODO: Train the network here
epochs = 30
losses = []
ep = []
for e in range(epochs):
    runloss = 0
    for images,labels in trainloader:
        logps = model(images) #log probabilities, runs the forward method
        loss = criterion(logps, labels) #calculate loss
        optimizer.zero_grad() #clear out all gradients
        loss.backward()
        optimizer.step()
        runloss += loss.item()
    print("Epoch:",e," Training Loss:",runloss/len(trainloader))
    ep.append(e)
    losses.append(runloss/len(trainloader))

plt.plot(ep, losses, label='Train Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

# Test out the network!

dataiter = iter(testloader)
images, labels = dataiter.next()
img = images[0]
# Convert 2D image to 1D vector
img = img.resize_(1, 784)

# TODO: Calculate the class probabilities (softmax) for img
ps = torch.exp(model(img))

# Plot the image and probabilities
helper.view_classify(img.resize_(1, 28, 28), ps, version='Fashion')

"""## Validation"""

images, labels = next(iter(testloader))
ps = torch.exp(model(images))
print(ps.shape)

top_p,top_class = ps.topk(1, dim=1)
equals = top_class == labels.view(top_class.shape)

print("Accuracy:",torch.mean(equals.type(torch.FloatTensor)).item() * 100,"%")

"""## Validation Pass"""

epochs = 30
testlosses = []
testacc = []
ep = []
for e in range(epochs):
    testloss = 0
    accuracy = 0
    with torch.no_grad():
        model.eval() #disables dropout for evaluation
        #turning off gradient for validation, saving power and memory
        for images, labels in testloader:
            log_ps = model(images)
            testloss = criterion(log_ps, labels).item()

            ps = torch.exp(log_ps)
            top_p,top_class = ps.topk(1,dim=1)
            equals = top_class == labels.view(top_class.shape)
            accuracy = torch.mean(equals.type(torch.FloatTensor)).item()
    print("Epoch:",e,"Test Loss:",testloss,"Accuracy:",accuracy)
    ep.append(e)
    testacc.append(accuracy)
    testlosses.append(testloss)

len(testloader)

model.train() #set model back to train mode

plt.plot(ep, losses, label='Train Loss')
plt.plot(ep, testlosses, label='Test Loss')
plt.plot(ep, testacc, label='Test Accuracy')
plt.xlabel('Epoch')
plt.legend()
plt.show()

print(model)
print(model.state_dict().keys())

"""## Saving The Model"""

#----SAVE & LOAD UTILITIES
path = './fashion_mnist_checkpoint.pth'

helper.save_model(model,path)